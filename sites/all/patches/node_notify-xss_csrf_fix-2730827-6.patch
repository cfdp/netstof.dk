diff --git a/node_notify.module b/node_notify.module
index fccd60e..46991d0 100644
--- a/node_notify.module
+++ b/node_notify.module
@@ -384,11 +384,25 @@ function node_notify_node_delete($node) {
  */
 function node_notify_node_view($node, $view_mode, $langcode) {
   if (user_access('subscribe to node') && in_array($node->type, node_notify_enabled_types()) && $view_mode == 'full') {
-    if (user_is_logged_in() && node_notify_is_subscribed($node->nid, $GLOBALS['user']->uid)) {
-      $node->content['links']['node']['#links']['unsubscribe'] = array(
-        'title' => t('Unsubscribe'),
-        'href' => 'node/' . $node->nid . '/unsubscribe',
-      );
+    if (user_is_logged_in()) {
+      if (node_notify_is_subscribed($node->nid, $GLOBALS['user']->uid)) {
+        $node->content['links']['node']['#links']['unsubscribe'] = array(
+          'title' => t('Unsubscribe'),
+          'href' => 'node/' . $node->nid . '/unsubscribe',
+          'query' => array(
+            'token' => node_notify_get_token('unsubscribe', $node->nid),
+          ),
+        );
+      }
+      else {
+        $node->content['links']['node']['#links']['subscribe'] = array(
+          'title' => t('Subscribe'),
+          'href' => 'node/' . $node->nid . '/subscribe',
+          'query' => array(
+            'token' => node_notify_get_token('subscribe', $node->nid),
+          ),
+        );
+      }
     }
     // Anonymous users always see subscribe link.
     else {
@@ -703,13 +717,13 @@ function node_notify_send_notification($subscription, $notification, $comment) {
             'subscriber' => $subscriber,
             'subscription' => $subscription,
           )),
-          'body' => token_replace($body, array(
+          'body' => filter_xss_admin(token_replace($body, array(
             'comment' => $comment,
             'subscriber' => $subscriber,
             'subscription' => $subscription,
           ), array(
             'sanitize' => FALSE,
-          )),
+          ))),
         ));

         $notified = NODE_NOTIFY_SENT;
@@ -833,7 +847,7 @@ function node_notify_log($subscription, $notification, $comment, $message = NULL
   $variables = array(
     '!comment' => l($comment->subject, 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)),
     '!node_uri' => url('node/' . $comment->nid),
-    '!subscriber' => $subscription->uid > 0 ? l(t('user'), 'user/' . $subscription->uid) : $subscription->email,
+    '!subscriber' => $subscription->uid > 0 ? l(t('user'), 'user/' . $subscription->uid) : check_plain($subscription->email),
   );

   switch ($notification->notified) {
@@ -870,3 +884,17 @@ function node_notify_log($subscription, $notification, $comment, $message = NULL
     ), WATCHDOG_ERROR);
   }
 }
+
+/**
+ * Generates a token for subscription / unsubscription.
+ */
+function node_notify_get_token($op, $nid) {
+  return drupal_get_token('node_notify_' . $op . '_' . $nid);
+}
+
+/**
+ * Checks whether subscription token is valid.
+ */
+function node_notify_check_token($op, $nid) {
+  return isset($_GET['token']) && drupal_valid_token($_GET['token'], 'node_notify_' . $op . '_' . $nid);
+}
diff --git a/node_notify.pages.inc b/node_notify.pages.inc
index d4b0763..2746633 100644
--- a/node_notify.pages.inc
+++ b/node_notify.pages.inc
@@ -31,14 +31,17 @@ function node_notify_disable_page($token) {
  * Subscription page callback.
  */
 function node_notify_subscribe_page($node) {
-  if (user_is_logged_in()) {
+  if (!user_is_logged_in()) {
+    return drupal_get_form('node_notify_subscribe_form', $node);
+  }
+  elseif (!node_notify_check_token('subscribe', $node->nid)) {
+    return MENU_ACCESS_DENIED;
+  }
+  else {
     node_notify_subscribe($node->nid, $GLOBALS['user']->uid);
     drupal_set_message(t('Subscribed to %title.', array('%title' => $node->title)));
     drupal_goto('node/' . $node->nid);
   }
-  else {
-    return drupal_get_form('node_notify_subscribe_form', $node);
-  }
 }

 /**
@@ -80,13 +83,13 @@ function node_notify_subscribe_form_submit($form, &$form_state) {
  * Page callback to unsubscribe current user from a node.
  */
 function node_notify_unsubscribe_page($node) {
-  if (user_is_logged_in()) {
+  if (user_is_logged_in() && node_notify_check_token('unsubscribe', $node->nid)) {
     node_notify_unsubscribe($node->nid, $GLOBALS['user']->uid);
     drupal_set_message(t('Unsubscribed from %title.', array('%title' => $node->title)));
     drupal_goto('node/' . $node->nid);
   }
   else {
-    drupal_access_denied();
+    return MENU_ACCESS_DENIED;
   }
 }

@@ -116,7 +119,7 @@ function node_notify_node_subscriptions_page($node) {
     $url = 'node/' . $node->nid . '/subscriptions/' . $record->sid;
     $rows[] = array(
       $record->uid ? l($record->name, 'user/' . $record->uid) : NULL,
-      $record->email, format_date($record->subscribed_on),
+      check_plain($record->email), format_date($record->subscribed_on),
       $record->enabled ?
       l(t('Disable'), $url . '/disable', array('query' => drupal_get_destination())) :
       l(t('Enable'), $url . '/enable', array('query' => drupal_get_destination())),
@@ -128,7 +131,6 @@ function node_notify_node_subscriptions_page($node) {
     '#header' => $header,
     '#rows' => $rows,
     '#empty' => t('No subscriptions yet.'),
-    // '#attributes' => array(),
   );

   return render($build) . theme('pager');
@@ -183,7 +185,6 @@ function node_notify_user_subscriptions_page($account) {
     '#header' => $header,
     '#rows' => $rows,
     '#empty' => t('No subscriptions yet.'),
-    // '#attributes' => array(),
   );

   return render($build) . theme('pager');
diff --git a/node_notify.test b/node_notify.test
index eeb1ddf..e893f79 100644
--- a/node_notify.test
+++ b/node_notify.test
@@ -29,7 +29,7 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
    * Set up state before testing.
    */
   protected function setUp() {
-    parent::setUp('node_notify', 'comment_notify');
+    parent::setUp('node_notify', 'comment_notify', 'dblog');

     $this->type = $this->createContentType();

@@ -128,14 +128,13 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
    * field. Registered users are subscribed at once and redirected.
    */
   protected function testNodeNotifySubscribeLink() {
-    $type = $this->type->type;
     $nid = $this->node->nid;
     $email = $this->getRandomEmail();
     $this->enableContentType($this->type);

     $this->drupalLogout();

-    $this->drupalGet("node/$nid/subscribe");
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_$nid"))));
     $this->assertResponse(403, 'Forbidden');

     user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));
@@ -143,7 +142,7 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
     $this->drupalLogin($this->admin);
     $this->drupalLogout();

-    $this->drupalGet("node/$nid/subscribe");
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_$nid"))));
     $this->assertResponse(200, 'Accessible');
     $this->assertPattern('/node-notify-subscribe-form/', 'Subscription form is displayed for anonymous user.');

@@ -152,14 +151,14 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
     $this->assertUrl("node/$nid", array(), 'Redirected to node page.');
     $this->assertTrue(node_notify_is_subscribed($nid, 0, $email), 'Anonymous user subscribed with node/N/subscribe form.');

-    $this->drupalGet("node/$nid/unsubscribe");
+    $this->drupalGet("node/$nid/unsubscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_unsubscribe_$nid"))));
     $this->assertResponse(403, 'Anonymous user is not allowed to access node/N/unsubscribe URL.');

     user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

     $this->drupalLogin($this->unprivileged);

-    $this->drupalGet("node/$nid/subscribe");
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_$nid"))));
     $this->assertResponse(403, 'Forbidden for unprivileged user.');

     $this->drupalLogout();
@@ -167,15 +166,58 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
     $this->drupalLogin($this->privileged);

     $this->drupalGet("node/$nid/subscribe");
+    $this->assertResponse(403, 'Forbidden to privileged user without token.');
+
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_{$nid}_"))));
+    $this->assertResponse(403, 'Forbidden to privileged user with wrong token.');
+
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_$nid"))));
     $this->assertResponse(200, 'Accessible to privileged user.');

-    $this->drupalGet("node/$nid/subscribe");
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/subscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_$nid"))));
     $this->assertResponse(200, 'Accessible');
     $this->assertNoPattern('/node-notify-subscribe-form/', 'Subscription form is not displayed for privileged user.');
     $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
     $this->assertTrue(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is subscribed.');

+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
     $this->drupalGet("node/$nid/unsubscribe");
+    $this->assertResponse(403, 'Forbidden to privileged user without token.');
+
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/unsubscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_subscribe_{$nid}_"))));
+    $this->assertResponse(403, 'Forbidden to privileged user with wrong token.');
+
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/unsubscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_unsubscribe_$nid"))));
+    $this->assertResponse(200, 'Accessible to privileged user.');
+
+    $this->drupalLogout();
+
+    $this->drupalLogin($this->privileged);
+
+    $this->drupalGet("node/$nid/unsubscribe", array('query' => array('token' => $this->drupalGetToken("node_notify_unsubscribe_$nid"))));
     $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
     $this->assertPattern('/Unsubscribed from/', 'Privileged user should see "Unsubscribe" message.');
     $this->assertFalse(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is unsubscribed.');
@@ -350,6 +392,54 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
     $this->assertMail('to', $email, "Notification mail sent to anonymous subscriber.");
   }

+  protected function testNodeNotifyXSS() {
+    db_delete('watchdog');
+
+    $nid = $this->node->nid;
+    $this->enableContentType($this->type);
+    $email = '<script>alert("XSS");</script>';
+
+    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node', 'access content'));
+
+    // This skips permission checking.
+    node_notify_subscribe($nid, 0, $email);
+    node_notify_subscribe($nid, $this->privileged->uid);
+
+    $this->drupalLogin($this->privileged);
+    $this->drupalGet("node/$nid");
+    $data = $this->postComment($this->node, '<script>alert("XSS");</script>', '<script>alert("XSS");</script>', NULL, NULL, FALSE);
+    $this->drupalLogout();
+
+    // Send notifications.
+    node_notify_get_notification($data['id'], $nid, 0, $email);
+    $this->assertMailNoString('subject', '<script>alert("XSS");</script>');
+    $this->assertMailNoString('body', '<script>alert("XSS");</script>');
+
+    node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
+    $this->assertMailNoString('subject', '<script>alert("XSS");</script>');
+    $this->assertMailNoString('body', '<script>alert("XSS");</script>');
+
+    // Check watchdog.
+    $this->drupalLogin($this->admin);
+    $this->drupalGet("node/$nid/subscriptions");
+    $this->assertNoRaw('<script>alert("XSS");</script>', 'XSS is filtered out at node subscriptions page.');
+
+    // Check if there's XSS in the watchdog log.
+    $query = db_select('watchdog', 'w');
+    $result = $query
+      ->fields('w', array('wid'))
+      ->execute();
+    foreach ($result as $dblog) {
+      $this->drupalGet("admin/reports/event/{$dblog->wid}");
+      $this->assertNoRaw('<script>alert("XSS");</script>', "No XSS is in watchdog {$dblog->wid}.");
+    }
+
+    $this->drupalLogout();
+
+
+
+  }
+
   /**
    * Integration with Comment Notify.
    */
@@ -735,4 +825,30 @@ class NodeNotifyTestCase extends DrupalWebTestCase {
       );
     }
   }
+
+  /**
+   * Asserts that the most recently sent e-mail message hasn't the substring in it.
+   *
+   * @param $field_name
+   *   Name of field or message property to assert: subject, body, id, ...
+   * @param $string
+   *   String to search for.
+   *
+   * @return
+   *   TRUE on pass, FALSE on fail.
+   */
+  protected function assertMailNoString($field_name, $string) {
+    $mails = $this->drupalGetMails();
+    $mail = end($mails);
+    $found = strpos($mail[$field_name], $string) !== FALSE;
+    return $this->assertFalse($found, t('Text not found in @field of email message: "@string".', array('@field' => $field_name, '@string' => $string)));
+  }
+  /**
+   * Generate a token for the currently logged in user.
+   *
+   * The original method is buggy, see https://www.drupal.org/node/1555862.
+   */
+  protected function drupalGetToken($value = '') {
+    return drupal_hmac_base64($value, $this->session_id . drupal_get_private_key() . drupal_get_hash_salt());
+  }
 }
