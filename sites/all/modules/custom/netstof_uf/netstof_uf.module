<?php
/**
 * Implements hook_menu()
 *
 * @ingroup hooks
 */
function netstof_uf_menu() {
  $items = array();
  $items['netstof_uf/sms_receiver'] = array(
    'title' => 'Netstof Utility Functions SMS message receiver',
    'page callback' => 'netstof_uf_receivesms',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['netstof_uf/sms_sender'] = array(
    'title' => 'Netstof Utility Functions SMS message sender',
    'page callback' => 'netstof_uf_sendsms',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

/*
 * Implementation of hook_form_alter()
 */
function netstof_uf_form_alter(&$form, &$form_state, $form_id){
  switch ($form_id) {
  case 'questions_and_answers_node_form':
    $form['#after_build'][] = 'netstof_uf_node_form_after_build';
    break;
  }
}

// afterbuild function - for removing the input text format fields for all users but admins
function netstof_uf_node_form_after_build($form) {
  if (netstof_uf_user_has_role('anonymous user')) {
    /*we limit the number of checkboxes that can be selected via a jQuery script*/
    drupal_add_js(path_to_theme() . "/scripts/netstof_uf.js");
  }
  /*Only admins get to play with the text format*/     
  if (!netstof_uf_user_has_role('administrator')) {
    $form['body']['und']['0']['format']['guidelines']['#access'] = FALSE;
    $form['body']['und']['0']['format']['help']['#access'] = FALSE;      
  }
  return $form;
}

function netstof_uf_node_update($node) {
  global $user;
  //if it is the first time the questions_and_answers node is edited by a counselor, change the author to the current user
  if (($node->uid == 0) && ($node->type == "questions_and_answers") && netstof_uf_user_has_role('Brevkasseredaktør')) {
    $node->uid = $user->uid;
    node_save($node);
    drupal_set_message(t('Author of Questions and Answers node changed from anonymous to ').$user->name);
  }
}

/**
* Check to see if a user has been assigned a certain role.
*
* @param $role
*   The name of the role you're trying to find.
* @param $user
*   The user object for the user you're checking; defaults to the current user.
* @return
*   TRUE if the user object has the role, FALSE if it does not.
*/
function netstof_uf_user_has_role($role, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check if the current time is within opening hours
 * @todo opening hours should be configurable fields in the administration
 */
function netstof_uf_open_to_posts() {
  $closed = false;
  $closingtime = 22;
  $openingtime = 9;
  $timezone = new DateTimeZone( "Europe/Copenhagen" );
  $date = new DateTime();
  $date->setTimezone($timezone);
  $present_hour =  $date->format('H');
  if($present_hour > ($closingtime -1) || $present_hour < $openingtime ){
    $closed = true;
  }
  return $closed;
}

function netstof_uf_test() {
  $id = variable_get('sms_id', '');
  drupal_set_message($id);
}

/**
* Send SMS message
* @param $mumber
*   The phone number the message should be sent to.
*/
function netstof_uf_sendsms($number){
  //@todo - ensure input is 8 ciphers and add 45 here in the code - delete phone number after sending message, if all went well
  $url_base = 'https://jclients.azurewebsites.net/sms/sender.aspx';
  $params = array();
  $user_field = 'id';
  $user = variable_get('sms_id', '');
  $params[$user_field]=$user;
  $number_field = 'sender';
  $number = '45'.$number;
  $params[$number_field]=$number;
  $besked_field = 'message';
  $besked = "Der er kommet et svar på dit spørgsmål, du kan læse det på http://netstof.dk/brevkasse/laege/mit-gode-spoergsmaal";
  $besked = drupal_convert_to_utf8($besked, 'utf-8');
  $params[$besked_field]=$besked;
  $query_string = http_build_query($params, NULL, '&');
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $http_result = drupal_http_request($url_base, array('headers' => $headers, 'method' => 'POST', 'data' => $query_string));
  $status = '<pre>SMS sent</pre>';
  // Check for HTTP errors
  if (isset($http_result->error)) {
    watchdog('netstof_uf',t('http request obj: '.  '<pre>'. print_r($http_result, TRUE) .'</pre>'),$params, WATCHDOG_ERROR, $link = NULL);
    $status = '<pre>Error: '.$http_result->error.'</pre>';
  }  
  return $status;
}

/**
* Receive SMS message - inspired by the sms simplegateway module
*
* @return
*   a string reflecting if the SMS was received or not
*/
function netstof_uf_receivesms() {
  //$number_field   = 'sender';
  $message_field  = 'message';
  $watchdogmsg = array();
  $message = "";
  //$number  = $_REQUEST[$number_field];
  if (isset($_REQUEST[$message_field])){
    $message = check_plain($_REQUEST[$message_field]);
  }
  if ($message == "") {
    watchdog('netstof_uf',t('Netstof Utility Functions: SMS message empty.'),$watchdogmsg, WATCHDOG_NOTICE, $link = NULL);
    $return_this = t("<pre>Netstof Utility Functions: No message received in SMS</pre>");
    return $return_this;
  }
  else {
    /*we limit the message length to 2000 characters*/
    $message = wordwrap($message, 2000);
    $message = explode("\n", $message);
    $message = $message[0] . '...';
    $watchdogmsg = array($message);
    watchdog('netstof_uf',t('Netstof Utility Functions: SMS message received: '.  '<pre>'. print_r($message, TRUE) .'</pre>'),$watchdogmsg, WATCHDOG_NOTICE, $link = NULL);
    $return_this = t('<pre>SMS message received</pre>');
    netstof_uf_save_sms($message);
    return $return_this;
  }
}

 /**
 * Save a sms question in a question and answer node
 */
function netstof_uf_save_sms($message) {
  // Create node object.
  $node = new StdClass();
  $node->type = 'questions_and_answers';
  $node->language = LANGUAGE_NONE;
  $node->uid = 0;
  $body_text = $message;
  node_object_prepare($node);
  $node->title = "SMS spørgsmål";
  $node->body[$node->language][0]['value']   = $body_text;
  $node->body[$node->language][0]['format']  = "filtered_html";
  $node->field_profile_qna_taxonomy[$node->language][0]['tid'] = "7";
  $node->field_qna_accept_conditions[$node->language][0]['value']  = "1";
  $node = node_submit($node);
  node_save($node);
}
